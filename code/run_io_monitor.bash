#!/bin/bash

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_NAME="test1db"
DB_USER="neegroom"
DB_HOST="localhost"
QUERY_FILE="query.sql"
PREPARE_FILE="prepare.sql"
PGDATA_DIR="/var/lib/postgresql/17/main"
PG_SERVICE_NAME="postgresql"
# -------------------------------

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
PRE_IO="/tmp/io_pre.txt"
POST_IO="/tmp/io_post.txt"
PRE_SYS="/tmp/sys_pre.txt"
POST_SYS="/tmp/sys_post.txt"
PRE_PROC="/tmp/sys_pre_proc.txt"
POST_PROC="/tmp/sys_post_proc.txt"

# üîç –°–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö example-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ examples/)
echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:"
mapfile -t EXAMPLES < <(find ./examples -maxdepth 1 -type d -name "example*" | sort)

if [ ${#EXAMPLES[@]} -eq 0 ]; then
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–∏–¥–∞ examples/example*/"
    exit 1
fi

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for i in "${!EXAMPLES[@]}"; do
    echo "[$i] ${EXAMPLES[$i]}"
done

# üî¢ –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞
while true; do
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞ [0..$((${#EXAMPLES[@]} - 1))]: " EX_INDEX
    if [[ "$EX_INDEX" =~ ^[0-9]+$ ]] && [ "$EX_INDEX" -ge 0 ] && [ "$EX_INDEX" -lt "${#EXAMPLES[@]}" ]; then
        break
    fi
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
done

SELECTED_DIR="${EXAMPLES[$EX_INDEX]}"
echo "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä: $SELECTED_DIR"

QUERY_FILE="$SELECTED_DIR/query.sql"
PREPARE_FILE="$SELECTED_DIR/prepare.sql"

echo "üìÇ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä: $SELECTED_DIR"
echo "üìÑ prepare.sql: $PREPARE_FILE"
echo "üìÑ query.sql:   $QUERY_FILE"
echo

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
PRE_IO="/tmp/io_pre.txt"
POST_IO="/tmp/io_post.txt"
PRE_SYS="/tmp/sys_pre.txt"
POST_SYS="/tmp/sys_post.txt"
PRE_PROC="/tmp/sys_pre_proc.txt"
POST_PROC="/tmp/sys_post_proc.txt"

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')
LOG_DIR="logs"
RESULT_DIR="results"
LOG_FILE="$LOG_DIR/run_$TIMESTAMP.log"
RESULT_FILE="$RESULT_DIR/result_$TIMESTAMP.txt"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$LOG_DIR" "$RESULT_DIR"

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥-—Ñ–∞–π–ª
exec > >(tee -a "$LOG_FILE") 2>&1

# –ü–æ–ª—É—á–∞–µ–º PID PostgreSQL
PG_PID=$(pgrep -u postgres -x postgres | head -n 1)
if [ -z "$PG_PID" ]; then
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ PID –Ω–µ –Ω–∞–π–¥–µ–Ω."
    exit 1
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ PostgreSQL
PG_VERSION=$(psql -U "$DB_USER" -d "$DB_NAME" -tAc "SHOW server_version_num;")
echo "üïí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $TIMESTAMP"
echo "PostgreSQL version: $PG_VERSION"
echo "PostgreSQL PID: $PG_PID"
echo

# --- ‚è±Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DDL –∏ –¥–∞–Ω–Ω—ã—Ö ---
if [ -f "$PREPARE_FILE" ]; then
    echo "üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è $PREPARE_FILE)..."
    psql -U "$DB_USER" -d "$DB_NAME" -f "$PREPARE_FILE"
    echo "‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
else
    echo "‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ($PREPARE_FILE) –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."
fi
echo

# --- 1. –°–±–æ—Ä PostgreSQL-IO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---

collect_pg_io_stats() {
    local OUTPUT_FILE="$1"
    local WHEN="$2"  # "pre" –∏–ª–∏ "post"

    echo "üì• [$WHEN] –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PostgreSQL..." 

    if [ "$PG_VERSION" -ge 160000 ]; then
        echo "üëâ pg_stat_io:" >> "$OUTPUT_FILE"
        psql -U "$DB_USER" -d "$DB_NAME" -Atc "
            SELECT backend_type || '|' || object || '|' || context AS key,
                   reads,
                   writes
            FROM pg_stat_io
            ORDER BY 1;" >> "$OUTPUT_FILE"

        echo "üëâ pg_statio_user_tables:" >> "$OUTPUT_FILE"
        psql -U "$DB_USER" -d "$DB_NAME" -Atc "
            SELECT relname,
                   heap_blks_read,
                   heap_blks_hit
            FROM pg_statio_user_tables
            ORDER BY 1;" >> "$OUTPUT_FILE"
    else
        echo "üëâ pg_statio_user_tables:" >> "$OUTPUT_FILE"
        psql -U "$DB_USER" -d "$DB_NAME" -Atc "
            SELECT relname,
                   heap_blks_read,
                   heap_blks_hit
            FROM pg_statio_user_tables
            ORDER BY 1;" >> "$OUTPUT_FILE"
    fi
}

collect_pg_io_stats "$PRE_IO" "pre"

# --- 2. –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
echo "üì• –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
iostat -dx 1 1 > "$PRE_SYS"
sudo grep -E '^rchar|^wchar|^syscr|^syscw' /proc/$PG_PID/io > "$PRE_PROC"

# --- 3. –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ ---
RPS=5      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
DURATION=10  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ----------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
# ----------------------------
run_query() {
    psql -U "$DB_USER" -d "$DB_NAME" -f "$QUERY_FILE" > /dev/null 2>&1
}

export -f run_query
export DB_USER DB_NAME QUERY_FILE

echo "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à"
psql -U "$DB_USER" -d "$DB_NAME" -c "DISCARD ALL;"

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–≥—Ä—É–∑–∫–∏
# ----------------------------
echo "üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–∫–∏: $RPS RPS, $DURATION —Å–µ–∫—É–Ω–¥..."
LOAD_START=$(date +%s)
echo "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ $QUERY_FILE..."
for ((i=1; i<=DURATION; i++)); do
    seq $RPS | parallel -j $RPS run_query
    sleep 1
done

echo "‚úÖ –ù–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
LOAD_END=$(date +%s)
echo "‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–∫–∏: $((LOAD_END - LOAD_START)) —Å–µ–∫—É–Ω–¥"

# --- 4. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ---
collect_pg_io_stats "$POST_IO" "post"

echo "üì§ –°–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
iostat -dx 1 1 > "$POST_SYS"
sudo grep -E '^rchar|^wchar|^syscr|^syscw' /proc/$PG_PID/io > "$POST_PROC"

# --- 5. –ê–Ω–∞–ª–∏–∑ PostgreSQL I/O ---

echo
echo "üìä Œî PostgreSQL I/O:" | tee -a "$RESULT_FILE"

if [ "$PG_VERSION" -ge 160000 ]; then
    echo "üìå pg_stat_io (Œî —á—Ç–µ–Ω–∏–π/–∑–∞–ø–∏—Å–µ–π):" | tee -a "$RESULT_FILE"
    awk '
    BEGIN { in_pre = 1 }
    /^üëâ/ {
        if ($0 ~ /post/) in_pre = 0
        next
    }
    in_pre && $0 !~ /^üëâ/ {
        split($0, a, "|")
        key = a[1] "|" a[2] "|" a[3]
        pre_reads[key] = a[4]
        pre_writes[key] = a[5]
        next
    }
    !in_pre && $0 !~ /^üëâ/ {
        split($0, a, "|")
        key = a[1] "|" a[2] "|" a[3]
        dr = a[4] - pre_reads[key]
        dw = a[5] - pre_writes[key]
        if (dr != 0 || dw != 0) {
            printf "  %-20s | Œîread: %-6d Œîwrite: %-6d\n", key, dr, dw
        }
    }' <(sed -n '/pg_stat_io:/,/pg_statio_user_tables:/p' "$PRE_IO") <(sed -n '/pg_stat_io:/,/pg_statio_user_tables:/p' "$POST_IO") | tee -a "$RESULT_FILE"

    echo
    echo "üìå pg_statio_user_tables (Œî disk read/cache hit):" | tee -a "$RESULT_FILE"
    join -t $'\t' \
        <(sed -n '/pg_statio_user_tables:/,$p' "$PRE_IO" | tail -n +2 | sort) \
        <(sed -n '/pg_statio_user_tables:/,$p' "$POST_IO" | tail -n +2 | sort) | \
    awk -F'\t' '
    {
        rel=$1
        r1=$2; h1=$3; r2=$4; h2=$5
        dr = r2 - r1
        dh = h2 - h1
        if (dr != 0 || dh != 0) {
            printf "  %-30s | Œîdisk read: %-6d Œîcache hit: %-6d\n", rel, dr, dh
        }
    }' | tee -a "$RESULT_FILE"
else
    echo "üìå pg_statio_user_tables (Œî disk read/cache hit):" | tee -a "$RESULT_FILE"
    join -t $'\t' <(cat "$PRE_IO" | sort) <(cat "$POST_IO" | sort) | awk -F'\t' '
    {
        rel=$1
        r1=$2; h1=$3; r2=$4; h2=$5
        dr = r2 - r1
        dh = h2 - h1
        if (dr != 0 || dh != 0) {
            printf "  %-30s | Œîdisk read: %-6d Œîcache hit: %-6d\n", rel, dr, dh
        }
    }' | tee -a "$RESULT_FILE"
fi

# --- 6. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
echo
echo "üìä Œî –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (/proc/$PG_PID/io): (–∑–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å)" | tee -a "$RESULT_FILE"
awk -v duration="$DURATION" '
    function human(x) {
        if (x > 1024*1024) return sprintf("%.2f MB", x / (1024*1024));
        else if (x > 1024) return sprintf("%.2f KB", x / 1024);
        else return sprintf("%d B", x);
    }

    FNR==NR { pre[$1]=$2; next }

    {
        delta = $2 - pre[$1];
        per_sec = delta / duration;

        printf "%-10s : %10d (%s total, %.2f/sec)\n",
               $1, delta, human(delta), per_sec;

        if ($1 == "rchar") rchar = delta;
        if ($1 == "wchar") wchar = delta;
        if ($1 == "syscr") syscr = delta;
        if ($1 == "syscw") syscw = delta;
    }

    END {
        total_bytes = rchar + wchar;
        total_ops = syscr + syscw;
        printf "\n%-20s: %s (%.2f KB/s)\n", "üì¶ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", human(total_bytes), total_bytes / 1024 / duration;
        printf "%-20s: %d (%.2f IOPS)\n", "‚öôÔ∏è  –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞", total_ops, total_ops / duration;
    }
' "$PRE_PROC" "$POST_PROC" | tee -a "$RESULT_FILE"

echo "--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PRE_PROC ---"; cat "$PRE_PROC"
echo "--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ POST_PROC ---"; cat "$POST_PROC"

echo


DISK=$(iostat -dx | awk '/^Device:/ {getline; print $1; exit}')
if [ -z "$DISK" ]; then
    echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ iostat!" | tee -a "$RESULT_FILE"
else
    echo "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $DISK" | tee -a "$RESULT_FILE"
    echo "üìä –û–±—â–∞—è –¥–∏—Å–∫-–Ω–∞–≥—Ä—É–∑–∫–∞ (iostat):" | tee -a "$RESULT_FILE"
    DISK=$(iostat -dx | awk '/^Device:/ {getline; print $1; exit}')
    echo "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $DISK" | tee -a "$RESULT_FILE"
    echo
    paste <(grep "^$DISK" "$PRE_SYS") <(grep "^$DISK" "$POST_SYS") | awk '
    {
        print "Œî iostat –ø–æ–ª—è:"
        printf "r/s:    %.2f -> %.2f\n", $2, $15;
        printf "w/s:    %.2f -> %.2f\n", $3, $16;
        printf "rKB/s:  %.2f -> %.2f\n", $4, $17;
        printf "wKB/s:  %.2f -> %.2f\n", $5, $18;
        printf "await:  %.2f -> %.2f\n", $10, $23;
    }' | tee -a "$RESULT_FILE"

echo
echo "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –õ–æ–≥: $LOG_FILE | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $RESULT_FILE"
